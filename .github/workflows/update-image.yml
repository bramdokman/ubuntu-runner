name: Update Ubuntu Runner Image

on:
  schedule:
    # Run every Monday at 6 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if no updates'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ubuntu-runner

jobs:
  check-updates:
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
      update_summary: ${{ steps.check.outputs.update_summary }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for package updates
        id: check
        run: |
          # Create a temporary Ubuntu container to check for updates
          docker run --rm ubuntu:24.04 sh -c "
            apt-get update > /dev/null 2>&1
            upgradable=\$(apt list --upgradable 2>/dev/null | grep -v 'WARNING' | wc -l)
            if [ \$upgradable -gt 1 ]; then
              echo 'has_updates=true' >> \$GITHUB_OUTPUT
              echo 'update_summary=Found \$upgradable package updates available' >> \$GITHUB_OUTPUT
            else
              echo 'has_updates=false' >> \$GITHUB_OUTPUT
              echo 'update_summary=No package updates available' >> \$GITHUB_OUTPUT
            fi
          "

      - name: Check external tool versions
        id: external_check
        run: |
          # Check for updates to external tools (simplified check)
          ./scripts/check-external-updates.sh || echo "External update check completed"

  build-and-push:
    needs: check-updates
    if: needs.check-updates.outputs.has_updates == 'true' || github.event.inputs.force_rebuild == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value={{date 'YYYY.MM.DD'}}
            type=sha,prefix={{date 'YYYY.MM.DD'}}-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}-${{ github.run_attempt }}
          release_name: Ubuntu Runner v${{ github.run_number }}-${{ github.run_attempt }}
          body: |
            Updated Ubuntu Runner image with latest packages.
            
            ${{ needs.check-updates.outputs.update_summary }}
            
            Docker images:
            ${{ steps.meta.outputs.tags }}
          draft: false
          prerelease: false

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: needs.build-and-push.result == 'success'
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  notify:
    needs: [check-updates, build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify on completion
        run: |
          if [ "${{ needs.build-and-push.result }}" == "success" ]; then
            echo "✅ Ubuntu Runner image updated successfully"
            echo "${{ needs.check-updates.outputs.update_summary }}"
          elif [ "${{ needs.check-updates.outputs.has_updates }}" == "false" ]; then
            echo "ℹ️ No updates available, skipping build"
          else
            echo "❌ Build failed"
          fi